using HBDStack.EfCore.Abstractions.Entities;
using HBDStack.EfCore.AuditTrail.Attributes;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace HBDStack.EfCore.AuditTrail.Entities;

internal sealed class AuditEntry
{
    private readonly AuditTrailAttribute _attribute;

    public AuditEntry(EntityEntry entry, AuditTrailAttribute attribute)
    {
        _attribute = attribute ?? throw new ArgumentNullException(nameof(attribute));
        Entry = entry ?? throw new ArgumentNullException(nameof(entry));
        TableName = entry.Metadata.GetTableName()!;
        Action = Entry.State;

        foreach (var property in Entry.Properties)
        {
            if (property.IsTemporary)
            {
                // value will be generated by the database, get the value after saving
                TemporaryProperties.Add(property);
                continue;
            }

            var propertyName = property.Metadata.Name;
            if (_attribute.IgnoredProperties.Contains(propertyName))
                continue;

            if (property.Metadata.IsPrimaryKey())
            {
                KeyValues[propertyName] = property.CurrentValue;
                continue;
            }

            switch (Entry.State)
            {
                case EntityState.Added:
                    NewValues[propertyName] = property.CurrentValue;
                    break;

                case EntityState.Deleted:
                    OldValues[propertyName] = property.OriginalValue;
                    break;

                case EntityState.Modified:
                    if (property.IsModified)
                    {
                        OldValues[propertyName] = property.OriginalValue;
                        NewValues[propertyName] = property.CurrentValue;
                    }

                    break;
            }
        }
    }

    public EntityEntry Entry { get; }
    public string TableName { get; }
    public Dictionary<string, object?> KeyValues { get; } = new();
    public Dictionary<string, object?> OldValues { get; } = new();
    public Dictionary<string, object?> NewValues { get; } = new();
    public List<PropertyEntry> TemporaryProperties { get; } = new();
    public bool HasTemporaryProperties => TemporaryProperties.Any();

    public EntityState Action { get; private set; }

    public dynamic ToAudit()
    {
        // Get the final value of the temporary properties
        if (HasTemporaryProperties)
            foreach (var prop in TemporaryProperties)
            {
                if (prop.Metadata.IsPrimaryKey())
                    KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                else
                    NewValues[prop.Metadata.Name] = prop.CurrentValue;
            }

        var entity = (IAuditProperties)Entry.Entity;
        //Create AuditItem accordingly to the provided attribute type.
        return Activator.CreateInstance(_attribute.AuditTrailItemType, 
            TableName,
                        KeyValues,
                        OldValues,
                        NewValues,
                        entity.UpdatedBy ?? entity.CreatedBy,
                        Action)!;
    }
}